openapi: 3.0.1
info:
  title: SignalD
  description: This is the SignalD HTTP API server
  contact:
    url: https://gitlab.com/LoveIsGrief
  license:
    name: GPLv3
    url: https://www.gnu.org/licenses/gpl-3.0.en.html
  version: 1.0.0
externalDocs:
  description: Find out more about SignalD
  url: https://gitlab.com/LoveIsGrief/signald
tags:
- name: contacts
  description: Managing contacts
- name: groups
  description: Managing groups
- name: setup
  description: Getting setup and started
- name: system
  description: The inner workings of signald
paths:
  /{username}/register:
    parameters:
      - name: username
        in: path
        required: true
        description: ID of user adding/modifying contacts
        schema:
          $ref: "#/components/schemas/PhoneNumber"
    post:
      tags:
      - setup
      summary: Register a phone number for the signal service
      operationId: register
      requestBody:
        description: Contact object that needs to be added
        content:
          application/json:
            schema:
              type: object
              properties:
                voice:
                  type: boolean
      responses:
        405:
          description: Invalid input
          content: {}
  /{username}/verify:
    parameters:
      - name: username
        in: path
        required: true
        description: ID of user adding/modifying contacts
        schema:
          $ref: "#/components/schemas/PhoneNumber"
    post:
      tags:
      - setup
      summary: Verify a number being registered
      operationId: verify
      requestBody:
        description: Contact object that needs to be added
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
      responses:
        405:
          description: Invalid input
          content: {}
  /{username}/contacts:
    parameters:
      - name: username
        in: path
        required: true
        description: ID of user adding/modifying contacts
        schema:
          $ref: "#/components/schemas/PhoneNumber"
    put:
      tags:
      - contacts
      summary: Update an existing contact
      operationId: updateContact
      requestBody:
        description: Contact object that needs to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Contact'
        required: true
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Contact not found
          content: {}
        405:
          description: Validation exception
          content: {}
    post:
      tags:
      - contacts
      summary: Add a new contact
      operationId: addContact
      requestBody:
        description: Contact object that needs to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Contact'
        required: true
      responses:
        405:
          description: Invalid input
          content: {}
    get:
      tags:
      - contacts
      summary: List existing contacts
      operationId: getContacts
      responses:
        200:
          description: A contact listing
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Contact"
        404:
          description: User not found
          content: {}
        405:
          description: Validation exception
          content: {}
  /{username}/contacts/{contactId}:
    parameters:
      - name: username
        in: path
        required: true
        description: ID of user adding/modifying contacts
        schema:
          $ref: "#/components/schemas/PhoneNumber"
    get:
      tags:
      - contacts
      summary: Get information about an existing contact
      operationId: getContact
      parameters:
      - name: contactId
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/Contact/properties/id"
      responses:
        200:
          description: A contact
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Contact"
        404:
          description: Contact or user not found
          content: {}

  /{username}/groups:
    parameters:
      - name: username
        in: path
        required: true
        description: ID of user adding/modifying contacts
        schema:
          $ref: "#/components/schemas/PhoneNumber"
    put:
      tags:
      - groups
      summary: Update an existing group
      operationId: updateGroup
      requestBody:
        description: Group object that needs to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
        required: true
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Group not found
          content: {}
        405:
          description: Validation exception
          content: {}
    post:
      tags:
      - groups
      summary: Create a new group
      operationId: addGroup
      requestBody:
        description: Group object that needs to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
        required: true
      responses:
        405:
          description: Invalid input
          content: {}
    get:
      tags:
      - groups
      summary: List existing groups
      operationId: getGroups
      responses:
        200:
          description: A group listing
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Group"
        404:
          description: User not found
          content: {}
        405:
          description: Validation exception
          content: {}
  /{username}/groups/{groupId}:
    parameters:
      - name: username
        in: path
        required: true
        description: ID of user adding/modifying contacts
        schema:
          $ref: "#/components/schemas/PhoneNumber"
    get:
      tags:
      - groups
      summary: Get information about an existing group
      operationId: getGroup
      parameters:
      - name: groupId
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/Group/properties/id"
      responses:
        200:
          description: A group
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
        404:
          description: Group or user not found
          content: {}
    delete:
      tags:
      - groups
      summary: Leave a group
      operationId: leaveGroup
      parameters:
      - name: groupId
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/Group/properties/id"
      responses:
        200:
          description: A group
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
        404:
          description: Group or user not found
          content: {}
#  /user:
#    post:
#      tags:
#      - user
#      summary: Create user
#      description: This can only be done by the logged in user.
#      operationId: createUser
#      requestBody:
#        description: Created user object
#        content:
#          '*/*':
#            schema:
#              $ref: '#/components/schemas/User'
#        required: true
#      responses:
#        default:
#          description: successful operation
#          content: {}
#  /user/createWithArray:
#    post:
#      tags:
#      - user
#      summary: Creates list of users with given input array
#      operationId: createUsersWithArrayInput
#      requestBody:
#        description: List of user object
#        content:
#          '*/*':
#            schema:
#              type: array
#              items:
#                $ref: '#/components/schemas/User'
#        required: true
#      responses:
#        default:
#          description: successful operation
#          content: {}
#  /user/createWithList:
#    post:
#      tags:
#      - user
#      summary: Creates list of users with given input array
#      operationId: createUsersWithListInput
#      requestBody:
#        description: List of user object
#        content:
#          '*/*':
#            schema:
#              type: array
#              items:
#                $ref: '#/components/schemas/User'
#        required: true
#      responses:
#        default:
#          description: successful operation
#          content: {}
#  /user/login:
#    get:
#      tags:
#      - user
#      summary: Logs user into the system
#      operationId: loginUser
#      parameters:
#      - name: username
#        in: query
#        description: The user name for login
#        required: true
#        schema:
#          type: string
#      - name: password
#        in: query
#        description: The password for login in clear text
#        required: true
#        schema:
#          type: string
#      responses:
#        200:
#          description: successful operation
#          headers:
#            X-Rate-Limit:
#              description: calls per hour allowed by the user
#              schema:
#                type: integer
#                format: int32
#            X-Expires-After:
#              description: date in UTC when token expires
#              schema:
#                type: string
#                format: date-time
#          content:
#            application/xml:
#              schema:
#                type: string
#            application/json:
#              schema:
#                type: string
#        400:
#          description: Invalid username/password supplied
#          content: {}
#  /user/logout:
#    get:
#      tags:
#      - user
#      summary: Logs out current logged in user session
#      operationId: logoutUser
#      responses:
#        default:
#          description: successful operation
#          content: {}
#  /user/{username}:
#    get:
#      tags:
#      - user
#      summary: Get user by user name
#      operationId: getUserByName
#      parameters:
#      - name: username
#        in: path
#        description: 'The name that needs to be fetched. Use user1 for testing. '
#        required: true
#        schema:
#          type: string
#      responses:
#        400:
#          description: Invalid username supplied
#          content: {}
#        404:
#          description: User not found
#          content: {}
#    put:
#      tags:
#      - user
#      summary: Updated user
#      description: This can only be done by the logged in user.
#      operationId: updateUser
#      parameters:
#      - name: username
#        in: path
#        description: name that need to be updated
#        required: true
#        schema:
#          type: string
#      requestBody:
#        description: Updated user object
#        content:
#          '*/*':
#            schema:
#              $ref: '#/components/schemas/User'
#        required: true
#      responses:
#        400:
#          description: Invalid user supplied
#          content: {}
#        404:
#          description: User not found
#          content: {}
#    delete:
#      tags:
#      - user
#      summary: Delete user
#      description: This can only be done by the logged in user.
#      operationId: deleteUser
#      parameters:
#      - name: username
#        in: path
#        description: The name that needs to be deleted
#        required: true
#        schema:
#          type: string
#      responses:
#        400:
#          description: Invalid username supplied
#          content: {}
#        404:
#          description: User not found
#          content: {}
  /version:
    get:
      tags:
        - system
      summary: Get the version number
      operationId: getVersion
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Version'
components:
  schemas:
    Contact:
      required:
      - name
      - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        color:
          type:
            string
    Group:
      required:
      - id
      type: object
      properties:
        id:
          type: string
          description: base64 encoded group ID
          format: byte
          example: MTIzNDU2Nzg5Cg==
        name:
          type: string
          example: Weekend group
        members:
          type: array
          items:
            $ref: '#/components/schemas/PhoneNumber'
    Message:
      required:
      - sender
      type: object
      properties:
        username:
          $ref: '#/components/schemas/PhoneNumber'
        recipientNumber:
          $ref: '#/components/schemas/PhoneNumber'
        recipientGroupId:
          $ref: '#/components/schemas/Group/properties/id'
        messageBody:
          type: string
        members:
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
        quote:
          $ref: '#/components/schemas/Quote'
    Quote:
      required:
      - id
      - author
      - text
      type: object
      properties:
        id:
          type: integer
          description: timestamp of original message
          format: int64
        name:
          $ref: '#/components/schemas/PhoneNumber'
        text:
          type: string
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
    Attachment:
      type: object
      required:
        - filename
      properties:
        caption:
          type: string
        width:
          type: integer
        height:
          type: integer
        preview:
          type: string
        voiceNote:
          type: boolean
    PhoneNumber:
      description: In international format
      type: string
      pattern: \+\d+
    Version:
      type: object
      required:
        - version
      properties:
        version:
          type: string
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header
